-- Drop das tabelas (se existirem)
DROP TABLE USUARIO CASCADE CONSTRAINTS;
DROP TABLE DOACAO CASCADE CONSTRAINTS;
DROP TABLE NOTICIA CASCADE CONSTRAINTS;
DROP TABLE ALERTA CASCADE CONSTRAINTS;
DROP TABLE ENDERECO CASCADE CONSTRAINTS;
DROP TABLE AUDITORIA CASCADE CONSTRAINTS;

-- Tabela USUARIO com IDENTITY
CREATE TABLE USUARIO (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) NOT NULL UNIQUE,
    senha VARCHAR2(100) NOT NULL,
    fl_doc_verificado CHAR(1) DEFAULT 'N',
    role VARCHAR2(10) DEFAULT 'USER',
    cep VARCHAR2(8) NOT NULL
);
ALTER TABLE USUARIO ADD CONSTRAINT chk_role CHECK (role IN ('USER', 'VOLUNTARIO', 'ADMIN'));

-- Tabela ENDERECO com IDENTITY
CREATE TABLE ENDERECO (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    usuario_id NUMBER REFERENCES USUARIO(id),
    logradouro VARCHAR2(100) NOT NULL,
    numero VARCHAR2(10),
    bairro VARCHAR2(60),
    cidade VARCHAR2(60),
    estado VARCHAR2(2),
    cep VARCHAR2(8)
);

-- Tabela ALERTA com IDENTITY
CREATE TABLE ALERTA (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    usuario_id NUMBER REFERENCES USUARIO(id),
    tipo_alerta VARCHAR2(50) NOT NULL,
    latitude NUMBER(9,6),
    longitude NUMBER(9,6)
);

-- Tabela DOACAO com IDENTITY
CREATE TABLE DOACAO (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    usuario_id NUMBER REFERENCES USUARIO(id),
    titulo VARCHAR2(200) NOT NULL,
    descricao VARCHAR2(500),
    valor NUMBER(10,2),
    data_criacao DATE DEFAULT SYSDATE
);

-- Tabela NOTICIA com IDENTITY
CREATE TABLE NOTICIA (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    usuario_id NUMBER REFERENCES USUARIO(id),
    titulo VARCHAR2(200) NOT NULL,
    subtitulo VARCHAR2(200),
    conteudo VARCHAR2(1000),
    link VARCHAR2(500)
);

-- Tabela AUDITORIA
CREATE TABLE AUDITORIA (
    id_auditoria NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tabela_afetada VARCHAR2(50),
    operacao VARCHAR2(10),
    usuario VARCHAR2(50),
    data_alteracao TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- Package de Gestão Supernova adaptado
CREATE OR REPLACE PACKAGE pkg_supernova AS
    PROCEDURE inserir_usuario(p_nome VARCHAR2, p_email VARCHAR2, p_senha VARCHAR2, p_fl_doc CHAR, p_role VARCHAR2, p_cep VARCHAR2);
    PROCEDURE atualizar_usuario(p_id NUMBER, p_nome VARCHAR2, p_email VARCHAR2, p_senha VARCHAR2, p_fl_doc CHAR, p_role VARCHAR2, p_cep VARCHAR2);
    PROCEDURE deletar_usuario(p_id NUMBER);
    PROCEDURE inserir_endereco(p_usuario_id NUMBER, p_logradouro VARCHAR2, p_numero VARCHAR2, p_bairro VARCHAR2, p_cidade VARCHAR2, p_estado VARCHAR2, p_cep VARCHAR2);
    PROCEDURE atualizar_endereco(p_id NUMBER, p_logradouro VARCHAR2, p_numero VARCHAR2, p_bairro VARCHAR2, p_cidade VARCHAR2, p_estado VARCHAR2, p_cep VARCHAR2);
    PROCEDURE deletar_endereco(p_id NUMBER);
    PROCEDURE inserir_alerta(p_usuario_id NUMBER, p_tipo_alerta VARCHAR2, p_latitude NUMBER, p_longitude NUMBER);
    PROCEDURE atualizar_alerta(p_id NUMBER, p_tipo_alerta VARCHAR2, p_latitude NUMBER, p_longitude NUMBER);
    PROCEDURE deletar_alerta(p_id NUMBER);
    PROCEDURE inserir_doacao(p_usuario_id NUMBER, p_titulo VARCHAR2, p_descricao VARCHAR2, p_valor NUMBER);
    PROCEDURE atualizar_doacao(p_id NUMBER, p_titulo VARCHAR2, p_descricao VARCHAR2, p_valor NUMBER);
    PROCEDURE deletar_doacao(p_id NUMBER);
    PROCEDURE inserir_noticia(p_usuario_id NUMBER, p_titulo VARCHAR2, p_subtitulo VARCHAR2, p_conteudo VARCHAR2, p_link VARCHAR2);
    PROCEDURE atualizar_noticia(p_id NUMBER, p_titulo VARCHAR2, p_subtitulo VARCHAR2, p_conteudo VARCHAR2, p_link VARCHAR2);
    PROCEDURE deletar_noticia(p_id NUMBER);
    FUNCTION calcular_risco_alerta(p_usuario_id NUMBER) RETURN VARCHAR2;
    PROCEDURE relatorio_doacoes;
END pkg_supernova;
/


-- Package Body
CREATE OR REPLACE PACKAGE BODY pkg_supernova AS
    -- Inserção de Usuário
    PROCEDURE inserir_usuario(
        p_nome VARCHAR2,
        p_email VARCHAR2,
        p_senha VARCHAR2,
        p_fl_doc CHAR,
        p_role VARCHAR2,
        p_cep VARCHAR2
    ) IS
    BEGIN
        INSERT INTO USUARIO (nome, email, senha, fl_doc_verificado, role, cep)
        VALUES (p_nome, p_email, p_senha, p_fl_doc, p_role, p_cep);
        COMMIT;
    END;

    -- Atualização de Usuário
    PROCEDURE atualizar_usuario(p_id NUMBER, p_nome VARCHAR2, p_email VARCHAR2, p_senha VARCHAR2, p_fl_doc CHAR, p_role VARCHAR2, p_cep VARCHAR2) IS
    BEGIN
        UPDATE USUARIO
        SET nome = p_nome, email = p_email, senha = p_senha, fl_doc_verificado = p_fl_doc, role = p_role, cep = p_cep
        WHERE id = p_id;
        COMMIT;
    END;

    -- Exclusão de Usuário
    PROCEDURE deletar_usuario(p_id NUMBER) IS
    BEGIN
        DELETE FROM USUARIO WHERE id = p_id;
        COMMIT;
    END;

    -- Inserção de Endereço
    PROCEDURE inserir_endereco(p_usuario_id NUMBER, p_logradouro VARCHAR2, p_numero VARCHAR2, p_bairro VARCHAR2, p_cidade VARCHAR2, p_estado VARCHAR2, p_cep VARCHAR2) IS
    BEGIN
        INSERT INTO ENDERECO (usuario_id, logradouro, numero, bairro, cidade, estado, cep)
        VALUES (p_usuario_id, p_logradouro, p_numero, p_bairro, p_cidade, p_estado, p_cep);
        COMMIT;
    END;

    -- Atualização de Endereço
    PROCEDURE atualizar_endereco(p_id NUMBER, p_logradouro VARCHAR2, p_numero VARCHAR2, p_bairro VARCHAR2, p_cidade VARCHAR2, p_estado VARCHAR2, p_cep VARCHAR2) IS
    BEGIN
        UPDATE ENDERECO
        SET logradouro = p_logradouro, numero = p_numero, bairro = p_bairro, cidade = p_cidade, estado = p_estado, cep = p_cep
        WHERE id = p_id;
        COMMIT;
    END;

    -- Exclusão de Endereço
    PROCEDURE deletar_endereco(p_id NUMBER) IS
    BEGIN
        DELETE FROM ENDERECO WHERE id = p_id;
        COMMIT;
    END;

    -- Inserção de Alerta
    PROCEDURE inserir_alerta(p_usuario_id NUMBER, p_tipo_alerta VARCHAR2, p_latitude NUMBER, p_longitude NUMBER) IS
    BEGIN
        INSERT INTO ALERTA (usuario_id, tipo_alerta, latitude, longitude)
        VALUES (p_usuario_id, p_tipo_alerta, p_latitude, p_longitude);
        COMMIT;
    END;

    -- Atualização de Alerta
    PROCEDURE atualizar_alerta(p_id NUMBER, p_tipo_alerta VARCHAR2, p_latitude NUMBER, p_longitude NUMBER) IS
    BEGIN
        UPDATE ALERTA
        SET tipo_alerta = p_tipo_alerta, latitude = p_latitude, longitude = p_longitude
        WHERE id = p_id;
        COMMIT;
    END;

    -- Exclusão de Alerta
    PROCEDURE deletar_alerta(p_id NUMBER) IS
    BEGIN
        DELETE FROM ALERTA WHERE id = p_id;
        COMMIT;
    END;

    -- Inserção de Doação
    PROCEDURE inserir_doacao(p_usuario_id NUMBER, p_titulo VARCHAR2, p_descricao VARCHAR2, p_valor NUMBER) IS
    BEGIN
        INSERT INTO DOACAO (usuario_id, titulo, descricao, valor)
        VALUES (p_usuario_id, p_titulo, p_descricao, p_valor);
        COMMIT;
    END;

    -- Atualização de Doação
    PROCEDURE atualizar_doacao(p_id NUMBER, p_titulo VARCHAR2, p_descricao VARCHAR2, p_valor NUMBER) IS
    BEGIN
        UPDATE DOACAO
        SET titulo = p_titulo, descricao = p_descricao, valor = p_valor
        WHERE id = p_id;
        COMMIT;
    END;

    -- Exclusão de Doação
    PROCEDURE deletar_doacao(p_id NUMBER) IS
    BEGIN
        DELETE FROM DOACAO WHERE id = p_id;
        COMMIT;
    END;

    -- Inserção de Notícia
    PROCEDURE inserir_noticia(p_usuario_id NUMBER, p_titulo VARCHAR2, p_subtitulo VARCHAR2, p_conteudo VARCHAR2, p_link VARCHAR2) IS
    BEGIN
        INSERT INTO NOTICIA (usuario_id, titulo, subtitulo, conteudo, link)
        VALUES (p_usuario_id, p_titulo, p_subtitulo, p_conteudo, p_link);
        COMMIT;
    END;

    -- Atualização de Notícia
    PROCEDURE atualizar_noticia(p_id NUMBER, p_titulo VARCHAR2, p_subtitulo VARCHAR2, p_conteudo VARCHAR2, p_link VARCHAR2) IS
    BEGIN
        UPDATE NOTICIA
        SET titulo = p_titulo, subtitulo = p_subtitulo, conteudo = p_conteudo, link = p_link
        WHERE id = p_id;
        COMMIT;
    END;

    -- Exclusão de Notícia
    PROCEDURE deletar_noticia(p_id NUMBER) IS
    BEGIN
        DELETE FROM NOTICIA WHERE id = p_id;
        COMMIT;
    END;

    -- Função de Cálculo de Risco de Alerta
    FUNCTION calcular_risco_alerta(p_usuario_id NUMBER) RETURN VARCHAR2 IS
        v_count NUMBER;
    BEGIN
        SELECT COUNT(*) INTO v_count FROM ALERTA WHERE usuario_id = p_usuario_id;
        IF v_count > 5 THEN
            RETURN 'Alto';
        ELSIF v_count > 2 THEN
            RETURN 'Moderado';
        ELSE
            RETURN 'Baixo';
        END IF;
    END;

    -- Relatório de Doações
    PROCEDURE relatorio_doacoes IS
        CURSOR c_doacoes IS
            SELECT u.nome, d.titulo, d.valor
            FROM DOACAO d
            JOIN USUARIO u ON d.usuario_id = u.id
            ORDER BY d.valor DESC;

        v_rec c_doacoes%ROWTYPE;
    BEGIN
        OPEN c_doacoes;
        LOOP
            FETCH c_doacoes INTO v_rec;
            EXIT WHEN c_doacoes%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('Usuário: ' || v_rec.nome || ' - Título: ' || v_rec.titulo || ' - Valor: ' || v_rec.valor);
        END LOOP;
        CLOSE c_doacoes;
    END;
END pkg_supernova;
/

-- Triggers de Auditoria
CREATE OR REPLACE TRIGGER trg_auditoria_usuario
AFTER INSERT OR UPDATE OR DELETE ON USUARIO
FOR EACH ROW
DECLARE
    v_operacao VARCHAR2(10);
BEGIN
    IF INSERTING THEN v_operacao := 'INSERT';
    ELSIF UPDATING THEN v_operacao := 'UPDATE';
    ELSE v_operacao := 'DELETE';
    END IF;
    INSERT INTO AUDITORIA (tabela_afetada, operacao, usuario) VALUES ('USUARIO', v_operacao, USER);
END;
/


CREATE OR REPLACE TRIGGER trg_auditoria_doacao
AFTER INSERT OR UPDATE OR DELETE ON DOACAO
FOR EACH ROW
DECLARE
    v_operacao VARCHAR2(10);
BEGIN
    IF INSERTING THEN v_operacao := 'INSERT';
    ELSIF UPDATING THEN v_operacao := 'UPDATE';
    ELSE v_operacao := 'DELETE';
    END IF;
    INSERT INTO AUDITORIA (tabela_afetada, operacao, usuario) VALUES ('DOACAO', v_operacao, USER);
END;
/


CREATE OR REPLACE TRIGGER trg_auditoria_endereco
AFTER INSERT OR UPDATE OR DELETE ON ENDERECO
FOR EACH ROW
DECLARE
    v_operacao VARCHAR2(10);
BEGIN
    IF INSERTING THEN v_operacao := 'INSERT';
    ELSIF UPDATING THEN v_operacao := 'UPDATE';
    ELSE v_operacao := 'DELETE';
    END IF;
    INSERT INTO AUDITORIA (tabela_afetada, operacao, usuario) VALUES ('ENDERECO', v_operacao, USER);
END;
/


CREATE OR REPLACE TRIGGER trg_auditoria_alerta
AFTER INSERT OR UPDATE OR DELETE ON ALERTA
FOR EACH ROW
DECLARE
    v_operacao VARCHAR2(10);
BEGIN
    IF INSERTING THEN v_operacao := 'INSERT';
    ELSIF UPDATING THEN v_operacao := 'UPDATE';
    ELSE v_operacao := 'DELETE';
    END IF;
    INSERT INTO AUDITORIA (tabela_afetada, operacao, usuario) VALUES ('ALERTA', v_operacao, USER);
END;
/


CREATE OR REPLACE TRIGGER trg_auditoria_noticia
AFTER INSERT OR UPDATE OR DELETE ON NOTICIA
FOR EACH ROW
DECLARE
    v_operacao VARCHAR2(10);
BEGIN
    IF INSERTING THEN v_operacao := 'INSERT';
    ELSIF UPDATING THEN v_operacao := 'UPDATE';
    ELSE v_operacao := 'DELETE';
    END IF;
    INSERT INTO AUDITORIA (tabela_afetada, operacao, usuario) VALUES ('NOTICIA', v_operacao, USER);
END;
/
